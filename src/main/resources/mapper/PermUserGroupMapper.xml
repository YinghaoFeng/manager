<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.zeus.manager.perm.dao.IPermUserGroupDao">

    <resultMap id="PermUserGroup" type="com.zeus.manager.perm.model.PermUserGroupModel">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="type" column="type"/>
        <result property="authIds" column="auth_ids"/>
        <result property="intro" column="intro"/>
        <result property="status" column="status"/>
        <result property="operater" column="operater"/>
        <result property="lastOperater" column="last_operater"/>
        <result property="ctime" column="c_time"/>
        <result property="utime" column="u_time"/>
    </resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
        id ,name ,type ,auth_ids ,intro ,status ,operater ,last_operater ,c_time ,u_time 
	    ]]>
	</sql>
	
    <insert id="insert" >
    <![CDATA[
        INSERT INTO m_perm_user_group (
	        id  ,
	        name  ,
	        type  ,
	        auth_ids  ,
	        intro  ,
	        status  ,
	        operater  ,
	        last_operater  ,
	        c_time  ,
	        u_time  
        ) VALUES (
        	#{id, jdbcType=INTEGER} ,
        	#{name, jdbcType=VARCHAR} ,
        	#{type, jdbcType=INTEGER} ,
        	#{authIds, jdbcType=VARCHAR} ,
        	#{intro, jdbcType=VARCHAR} ,
        	#{status, jdbcType=INTEGER} ,
        	#{operater, jdbcType=VARCHAR} ,
        	#{lastOperater, jdbcType=VARCHAR} ,
        	#{ctime, jdbcType=TIMESTAMP} ,
        	#{utime, jdbcType=TIMESTAMP} 
        )
    ]]>
    </insert>

    <update id="update" >
        UPDATE m_perm_user_group SET
	        <if test="name != null">name = #{name, jdbcType=VARCHAR} ,</if>
	        <if test="type != null">type = #{type, jdbcType=INTEGER} ,</if>
	        <if test="authIds != null">auth_ids = #{authIds, jdbcType=VARCHAR} ,</if>
	        <if test="intro != null">intro = #{intro, jdbcType=VARCHAR} ,</if>
	        <if test="status != null">status = #{status, jdbcType=INTEGER} ,</if>
	        <if test="operater != null">operater = #{operater, jdbcType=VARCHAR} ,</if>
	        <if test="lastOperater != null">last_operater = #{lastOperater, jdbcType=VARCHAR} ,</if>
	        <if test="ctime != null">c_time = #{ctime, jdbcType=TIMESTAMP} ,</if>
	        <if test="utime != null">u_time = #{utime, jdbcType=TIMESTAMP} </if>
        WHERE 
	        id = #{id} 
    </update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM m_perm_user_group WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="PermUserGroup">
	    SELECT <include refid="columns"/>
	    <![CDATA[
	        FROM m_perm_user_group 
	        WHERE 
		        id = #{id} 
	    ]]>
    </select>

	<sql id="findWhere">
	    <where>
					<if test="name != null">
						AND name = #{name}
					</if>
					<if test="authIds != null">
						AND auth_ids = #{authIds}
					</if>
					<if test="intro != null">
						AND intro = #{intro}
					</if>
					<if test="operater != null">
						AND operater = #{operater}
					</if>
					<if test="lastOperater != null">
						AND last_operater = #{lastOperater}
					</if>
	    </where>
	</sql>
	 
    <select id="findPageCount" resultType="int">
        SELECT count(*) FROM m_perm_user_group <include refid="findWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 #offset#,#pageSize#,#lastRows# 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="PermUserGroup">
    	SELECT <include refid="columns"/> FROM m_perm_user_group 
		<include refid="findWhere"/>
		<if test="sortColumns != null">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<select id="find" resultMap="PermUserGroup">
	    SELECT <include refid="columns"/> FROM m_perm_user_group 
		<include refid="findWhere"/>
		<if test="sortColumns != null">
			ORDER BY ${sortColumns}
		</if>
    </select>
	
</mapper>

